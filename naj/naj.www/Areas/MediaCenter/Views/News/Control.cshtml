@{
    Layout = "~/Views/Shared/_InternalLayout.cshtml";
    ViewBag.Title = "أدارة الأخبار";
}

@section Head
{
    @*<link href="/ServicesFiles/ServicesMasterCSS/Serv.css" rel="stylesheet" type="text/css"/>*@
    <link href="/css/golden-forms.css" rel="stylesheet" type="text/css"/>
    @*<link href="/ServicesFiles/ServicesMasterCSS/Styles.css" rel="stylesheet" type="text/css" />*@
    @*<script src="/ServicesFiles/ServicesMasterJS/jquery.min.2.0.2.js"></script>*@

    <script type="text/javascript">

        (function($) {

            var najComboBoxMethods = {
                init: function(options) {
                    var selectID = '';

                    // Binding Properties
                    var bindingOptions = {
                        url: options.ajax.url,
                        type: options.ajax.type,
                        data: options.ajax.data,
                        dataType: 'json',
                        processData: true,
                        contentType: 'application/json; charset=utf-8',
                        success: function(response, status, xhr) {
                            $.each(response, function(key, item) {
                                $('#' + selectID).append($('<option></option>').attr('value', item[options.columnValue]).text(item[options.columnTitle]));
                            });
                        },
                        error: function(xhr, status, error) {},
                        complete: function(jqXHR, status) {
                            $(options.loader).css('display', 'none');
                        }
                    };

                    var initialize = function(element) {
                        selectID = $(element).attr('id') + 'NajComboBox';

                        $(element).append($('<lable></label>').attr('for', selectID).addClass('lbl-text').html(options.title));
                        $(element).append($('<lable></label>').attr('for', selectID).addClass('lbl-ui select')
                            .append($('<select></select>').attr('id', selectID)));

                        // Update Event Handler
                        if (options.updater == undefined || options.updaterEvent == undefined)
                            $(document).ready(function() {
                                resetData();
                                bindData();
                            });
                        else
                            options.updater.on(options.updaterEvent, function(e) {
                                var data = jQuery.extend(true, {}, options.ajax.data);
                                $.each(options.ajax.data, function(k, v) {
                                    data[k] = eval(v);
                                });
                                resetData();
                                bindData(data);
                            });

                        // Trigger Change Event
                        $('#' + selectID).on('change', function(e) {
                            $(element).trigger('select');
                        });
                    }

                    // Binding Data Function
                    var bindData = function(data) {
                        var localBindingoptions = jQuery.extend(true, {}, bindingOptions);
                        localBindingoptions.data = JSON.stringify(data);
                        $(options.loader).css('display', 'block');
                        $.ajax(localBindingoptions);
                    }

                    // Reset Data Function
                    var resetData = function(resetpaging, resetsearch) {
                        $('#' + selectID).empty();
                    }

                    initialize(this);
                },
                val: function() {
                    return $('select', this).val();
                }
                //hide: function () { },
                //update: function (content) { } // $('#xxx').najComboBox('update','xxxx');
            };

            var najDataGridMethods = {
                init: function(options) {
                    var table, itemCount = 1;

                    // Binding Properties
                    var bindingOptions = {
                        url: options.ajax.url,
                        type: options.ajax.type,
                        data: options.ajax.data,
                        dataType: 'json',
                        processData: true,
                        contentType: 'application/json; charset=utf-8',
                        success: function(response, status, xhr) {
                            itemCount = response.ItemCount;
                            if (response.ItemCount > 0) {
                                $.each(response.DataSet, function(key, item) {
                                    var tr = $('<tr></tr>');
                                    $.each(options.columns, function(key, value) {
                                        if (value.visable == undefined || value.visable)
                                            if ($.isFunction(value.value))
                                                $(tr).append($('<td></td>').append(value.value(item)));
                                            else
                                                $(tr).append($('<td></td>').text(item[value.value]));
                                    });
                                    if (options.detailsRow) {
                                        $(tr).append($('<td></td>')
                                            .append($('<a></a>')
                                                .append($('<span></span>').html(options.detailsTitle))
                                                .append($('<img></img>').addClass('openGridDetail'))
                                            .on('click', item, function () {
                                                    var parentRow = $(this).parent().parent();
                                                    if ($('img', this).hasClass('openGridDetail')) {
                                                        $('img', this).removeClass('openGridDetail').addClass('closeGridDetail');
                                                        var tr = $('<tr></tr>');
                                                        if (parentRow.hasClass('AlterRowStyle'))
                                                            tr.addClass('AlterRowStyle');
                                                        tr.append($('<td></td>').css('text-align', 'center').attr('colspan', parentRow.children().length).html(options.detailsRow(item))).insertAfter(parentRow);
                                                    } else if ($('img', this).hasClass('closeGridDetail')) {
                                                        $('img', this).removeClass('closeGridDetail').addClass('openGridDetail');
                                                        parentRow.next().remove();
                                                    }
                                                })));
                                    }
                                    if (options.editable || options.deleteable) {
                                        var td = $('<td></td>');
                                        if (options.editable) {
                                            td
                                                .append($('<a></a>')
                                                    .append($('<img></img>').attr('src', '/images/Gridedit.png'))
                                                    .attr('title', options.editTitle)
                                                    .on('click', item, function() {
                                                        options.editTemplate(item);
                                                    }));
                                        }
                                        if (options.deleteable) {
                                            td
                                                .append($('<a></a>')
                                                    .append($('<img></img>').attr('src', '/images/Griddelet.png'))
                                                    .attr('title', options.deleteTitle)
                                                    .on('click', item, function() {
                                                        options.deleteTemplate(item);
                                                    }));
                                        }
                                        $(tr).append(td);
                                    }
                                    $('.dataset', table).append(tr);
                                });
                            } else {
                                var tr = $('<tr></tr>').append($('<td></td>').text(options.emptyMessage).css('text-align', 'center').attr('colspan', options.columns.length));
                                $('.dataset', table).append(tr);
                            }
                        },
                        error: function(xhr, status, error) {},
                        complete: function(jqXHR, status) {
                            initializePaging(options.pageSize, bindingOptions.data.Operations.currentPage, itemCount);
                            $('.dataset > tr:odd', table).addClass('AlterRowStyle');
                            $(options.loader).css('display', 'none');
                        }
                    };

                    // Initialize paging Function
                    var initializePaging = function(pageSize, currentPage, itemCount) {
                        $('tfoot > tr', table).empty();
                        if (options.paging) {
                            var td = $('<td></td>').attr('class', 'pagerLinksTD2');

                            var pageCount = Math.ceil(itemCount / pageSize);
                            for (var i = 1; i <= pageCount; i++)
                                if (i == currentPage)
                                    td.append($('<span></span>').html(i));
                                else
                                    td.append($('<a></a>').attr('class', 'page').html(i));

                            // Grid Footer
                            $('tfoot > tr', table)
                                .append($('<td></td>').attr('colspan', '100').attr('class', 'FooterColor')
                                    .append($('<table></table>').attr('class', 'Tableleft').attr('cellpadding', '0').attr('cellspacing', '0')
                                        .append($('<tr></tr>')
                                            .append($('<td></td>').attr('class', 'pagern')
                                                .append($('<a></a>').attr('class', 'prevPage')
                                                    .append($('<img></img>').attr('alt', 'السابق').attr('src', '/images/GridRightArr.png'))))
                                            .append(td)
                                            .append($('<td></td>').attr('class', 'pagern')
                                                .append($('<a></a>').attr('class', 'nextPage')
                                                    .append($('<img></img>').attr('alt', 'التالي').attr('src', '/images/GridLeftArr.png')))))));

                            $('.prevPage', table).on('click', function(e) {
                                if (bindingOptions.data.Operations.currentPage > 1) {
                                    bindingOptions.data.Operations.currentPage = bindingOptions.data.Operations.currentPage - 1;
                                    //options.updater.trigger(options.updaterEvent, [false, false]);
                                    getData(false, false);
                                }
                            });
                            $('.nextPage', table).on('click', function(e) {
                                if (bindingOptions.data.Operations.currentPage < Math.ceil(itemCount / pageSize)) {
                                    bindingOptions.data.Operations.currentPage = bindingOptions.data.Operations.currentPage + 1;
                                    //options.updater.trigger(options.updaterEvent, [false, false]);
                                    getData(false, false);
                                }
                            });
                            $('.page', table).on('click', function(e) {
                                bindingOptions.data.Operations.currentPage = parseInt($(e.target).html());;
                                //options.updater.trigger(options.updaterEvent, [false, false]);
                                getData(false, false);
                            });
                        }
                    }

                    // Initialize Sort Function
                    var initializeSort = function() {
                        bindingOptions.data.Operations.sortExpression = options.sortFields;
                    }

                    // Initialize Search Function
                    var initializeSearch = function() {
                        bindingOptions.data.Operations.searchFields = options.searchFields;
                        return $('<div></div>').attr('class', 'GridSearchCont')
                            .append($('<input></input>').attr('type', 'text').attr('id', 'fnames').attr('class', 'input GridSearch').attr('placeholder', 'أكتب بحثك هنا ...'));
                    }

                    // Initialize Insert Operation
                    var initializeInsert = function() {

                    }

                    var getData = function(resetpaging, resetsearch) {
                        var data = jQuery.extend(true, {}, options.ajax.data);
                        $.each(options.ajax.data, function(k, v) {
                            if (k != "searchFields" && k != "searchKeyword" && k != "pageSize" && k != "currentPage" && k != "sortTable" && k != "sortFields")
                                data[k] = eval(v);
                        });
                        resetData(resetpaging, resetsearch);
                        bindData(data);
                    }

                    // Initialize Function
                    var initialize = function() {
                        // Update Event Handler
                        var data = jQuery.extend(true, {}, options.ajax.data);
                        if (options.updater == undefined || options.updaterEvent == undefined)
                            $(document).ready(function() {
                                getData(true, true);
                            });
                        else
                            options.updater.on(options.updaterEvent, function(e, resetpaging, resetsearch) {
                                getData(data, resetpaging, resetsearch);
                            });

                        table = $('<table></table>').attr('class', 'Grid')
                            .append($('<thead></thead>').append($('<tr></tr>')))
                            .append($('<tbody></tbody>').attr('class', 'dataset'))
                            .append($('<tfoot></tfoot>').append($('<tr></tr>').attr('id', 'paging')));

                        // Grid Columns Header
                        $.each(options.columns, function(k, v) {
                            if (v.visable == undefined || v.visable == true)
                                $('thead > tr', table).append($('<th></th>').text(v.header));
                        });

                        if (options.detailsRow) {
                            $('thead > tr', table).append($('<th></th>'));
                        }
                        if (options.insertable || options.editable || options.deleteable) {
                            var td = $('<th></th>');
                            if (options.insertable)
                                td
                                    .append($('<a></a>')
                                        .append($('<img></img>').attr('src', '/images/Gridadd.png'))
                                        .attr('title', options.insertTitle)
                                        .on('click', function() {
                                            options.insertTemplate();
                                        }));
                                    //.append($('<a></a>').addClass('button').addClass('green').attr('title', options.insertTitle)
                                    //    .append($('<span></span>').text('+'))
                                    //    .on('click', function() {
                                    //        options.insertTemplate();
                                    //    }));
                            $('thead > tr', table).append(td);
                        }


                        if (options.paging) {
                            initializePaging(options.pageSize, 1, itemCount);
                            bindingOptions.data.Operations.pageSize = options.pageSize;
                            bindingOptions.data.Operations.currentPage = 1;
                        }

                        if (options.sortTable)
                            initializeSort();

                        return table;
                    }

                    // Binding Data Function
                    var bindData = function(data) {
                        var localBindingoptions = jQuery.extend(true, {}, bindingOptions);
                        localBindingoptions.data = JSON.stringify(data);
                        $(options.loader).css('display', 'block');
                        $.ajax(localBindingoptions);
                    }

                    // Reset Data Function
                    var resetData = function(resetpaging, resetsearch) {
                        $('.dataset', table).empty();
                        resetpaging = (resetpaging == undefined) ? true : resetpaging;
                        resetsearch = (resetsearch == undefined) ? true : resetsearch;
                        if (resetpaging) {
                            itemCount = 1;
                            bindingOptions.data.Operations.currentPage = 1;
                            options.ajax.data.Operations.currentPage = 1;
                        }
                        if (resetsearch) {
                            $('.GridSearchCont > input', table.parent()).val('');
                            bindingOptions.data.Operations.searchKeyword = '';
                        }
                    }

                    bindingOptions.data.Operations = new Object();

                    if (options.searchable) {
                        $(this).append(initializeSearch());
                        $('.GridSearchCont input', table).on('keypress', function(e) {
                            var code = e.keyCode || e.which;
                            if (code == 13) {
                                e.preventDefault();
                                bindingOptions.data.Operations.searchKeyword = $('.GridSearchCont input').val();
                                getData(true, false);
                                //options.updater.trigger(options.updaterEvent, [true, false]);
                                return false;
                            }
                        });
                    }

                    $(this).append(initialize());
                }
            };

            $.fn.najComboBox = function(methodOrOptions) {
                if (najComboBoxMethods[methodOrOptions]) {
                    return najComboBoxMethods[methodOrOptions].apply(this, Array.prototype.slice.call(arguments, 1));
                } else if (typeof methodOrOptions === 'object' || !methodOrOptions) {
                    // Default to "init"
                    return najComboBoxMethods.init.apply(this, arguments);
                } else {
                    $.error('Method ' + methodOrOptions + ' does not exist on jQuery.najComboBox');
                }
            };

            $.fn.najDataGrid = function(methodOrOptions) {
                if (najDataGridMethods[methodOrOptions]) {
                    return najDataGridMethods[methodOrOptions].apply(this, Array.prototype.slice.call(arguments, 1));
                } else if (typeof methodOrOptions === 'object' || !methodOrOptions) {
                    // Default to "init"
                    return najDataGridMethods.init.apply(this, arguments);
                } else {
                    $.error('Method ' + methodOrOptions + ' does not exist on jQuery.najDataGrid');
                }
            };

        })(jQuery);

    </script>
    <script type="text/javascript">
        $(document).ready(function() {
            $('#gvNews').najDataGrid({
                columns: [
                    { header: "NewID", value: "NewID", visable: false },
                    { header: "العنوان", value: "Title" },
                    { header: "التفاصيل", value: "Details" },
                    { header: "الصورة", value: function(row) { return $('<img></img>').attr('src', row['Image']).attr('width', 50).attr('height', 50); } },
                    { header: "التاريخ", value: "Date" }
                ],
                emptyMessage: "لا يوجدأخبار",
                ajax:
                {
                    url: '/MediaCenter/News/All',
                    type: 'POST',
                    data: {}
                },
                loader: $('#loader-wrapper'),
                searchable: true,
                searchFields: ["Title", "Details"],
                paging: true,
                pageSize: 10,
                sortTable: true,
                sortFields: [{ name: "Date", desc: true }],
                insertable: true,
                insertTitle: 'أضافة خبر جديد',
                insertTemplate: function() {
                    alert(' -hii insert');
                },
                editable: true,
                editTitle: 'تعديل الخبر',
                editTemplate: function(row) {
                    alert(row["Title"] + ' -hii edit');
                },
                deleteable: true,
                deleteTitle: 'حذف الخبر',
                deleteTemplate: function(row) {
                    alert(row["Title"] + ' -hii delete');
                }
            });
        });
    </script>
}
<div class="golden-forms wrapper form-enclose form-section">
    <div class="row col12 first">
        <section>
            <div id="gvNews" class="GridViewDiv">
            </div>
        </section>
    </div>
</div>
<div id="loader-wrapper" style="direction: ltr;">
    <div id="loader"></div>
</div>